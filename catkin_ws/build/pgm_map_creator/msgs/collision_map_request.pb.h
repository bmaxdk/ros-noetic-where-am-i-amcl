// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: collision_map_request.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_collision_5fmap_5frequest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_collision_5fmap_5frequest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3016000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3016000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "vector2d.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_collision_5fmap_5frequest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_collision_5fmap_5frequest_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_collision_5fmap_5frequest_2eproto;
namespace collision_map_creator_msgs {
namespace msgs {
class CollisionMapRequest;
struct CollisionMapRequestDefaultTypeInternal;
extern CollisionMapRequestDefaultTypeInternal _CollisionMapRequest_default_instance_;
}  // namespace msgs
}  // namespace collision_map_creator_msgs
PROTOBUF_NAMESPACE_OPEN
template<> ::collision_map_creator_msgs::msgs::CollisionMapRequest* Arena::CreateMaybeMessage<::collision_map_creator_msgs::msgs::CollisionMapRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace collision_map_creator_msgs {
namespace msgs {

// ===================================================================

class CollisionMapRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:collision_map_creator_msgs.msgs.CollisionMapRequest) */ {
 public:
  inline CollisionMapRequest() : CollisionMapRequest(nullptr) {}
  ~CollisionMapRequest() override;
  explicit constexpr CollisionMapRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CollisionMapRequest(const CollisionMapRequest& from);
  CollisionMapRequest(CollisionMapRequest&& from) noexcept
    : CollisionMapRequest() {
    *this = ::std::move(from);
  }

  inline CollisionMapRequest& operator=(const CollisionMapRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CollisionMapRequest& operator=(CollisionMapRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CollisionMapRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CollisionMapRequest* internal_default_instance() {
    return reinterpret_cast<const CollisionMapRequest*>(
               &_CollisionMapRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CollisionMapRequest& a, CollisionMapRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CollisionMapRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CollisionMapRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CollisionMapRequest* New() const final {
    return CreateMaybeMessage<CollisionMapRequest>(nullptr);
  }

  CollisionMapRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CollisionMapRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CollisionMapRequest& from);
  void MergeFrom(const CollisionMapRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CollisionMapRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "collision_map_creator_msgs.msgs.CollisionMapRequest";
  }
  protected:
  explicit CollisionMapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilenameFieldNumber = 7,
    kUpperLeftFieldNumber = 1,
    kUpperRightFieldNumber = 2,
    kLowerRightFieldNumber = 3,
    kLowerLeftFieldNumber = 4,
    kHeightFieldNumber = 5,
    kResolutionFieldNumber = 6,
    kThresholdFieldNumber = 8,
  };
  // optional string filename = 7 [default = ""];
  bool has_filename() const;
  private:
  bool _internal_has_filename() const;
  public:
  void clear_filename();
  const std::string& filename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // required .gazebo.msgs.Vector2d upperLeft = 1;
  bool has_upperleft() const;
  private:
  bool _internal_has_upperleft() const;
  public:
  void clear_upperleft();
  const ::gazebo::msgs::Vector2d& upperleft() const;
  ::gazebo::msgs::Vector2d* release_upperleft();
  ::gazebo::msgs::Vector2d* mutable_upperleft();
  void set_allocated_upperleft(::gazebo::msgs::Vector2d* upperleft);
  private:
  const ::gazebo::msgs::Vector2d& _internal_upperleft() const;
  ::gazebo::msgs::Vector2d* _internal_mutable_upperleft();
  public:
  void unsafe_arena_set_allocated_upperleft(
      ::gazebo::msgs::Vector2d* upperleft);
  ::gazebo::msgs::Vector2d* unsafe_arena_release_upperleft();

  // required .gazebo.msgs.Vector2d upperRight = 2;
  bool has_upperright() const;
  private:
  bool _internal_has_upperright() const;
  public:
  void clear_upperright();
  const ::gazebo::msgs::Vector2d& upperright() const;
  ::gazebo::msgs::Vector2d* release_upperright();
  ::gazebo::msgs::Vector2d* mutable_upperright();
  void set_allocated_upperright(::gazebo::msgs::Vector2d* upperright);
  private:
  const ::gazebo::msgs::Vector2d& _internal_upperright() const;
  ::gazebo::msgs::Vector2d* _internal_mutable_upperright();
  public:
  void unsafe_arena_set_allocated_upperright(
      ::gazebo::msgs::Vector2d* upperright);
  ::gazebo::msgs::Vector2d* unsafe_arena_release_upperright();

  // required .gazebo.msgs.Vector2d lowerRight = 3;
  bool has_lowerright() const;
  private:
  bool _internal_has_lowerright() const;
  public:
  void clear_lowerright();
  const ::gazebo::msgs::Vector2d& lowerright() const;
  ::gazebo::msgs::Vector2d* release_lowerright();
  ::gazebo::msgs::Vector2d* mutable_lowerright();
  void set_allocated_lowerright(::gazebo::msgs::Vector2d* lowerright);
  private:
  const ::gazebo::msgs::Vector2d& _internal_lowerright() const;
  ::gazebo::msgs::Vector2d* _internal_mutable_lowerright();
  public:
  void unsafe_arena_set_allocated_lowerright(
      ::gazebo::msgs::Vector2d* lowerright);
  ::gazebo::msgs::Vector2d* unsafe_arena_release_lowerright();

  // required .gazebo.msgs.Vector2d lowerLeft = 4;
  bool has_lowerleft() const;
  private:
  bool _internal_has_lowerleft() const;
  public:
  void clear_lowerleft();
  const ::gazebo::msgs::Vector2d& lowerleft() const;
  ::gazebo::msgs::Vector2d* release_lowerleft();
  ::gazebo::msgs::Vector2d* mutable_lowerleft();
  void set_allocated_lowerleft(::gazebo::msgs::Vector2d* lowerleft);
  private:
  const ::gazebo::msgs::Vector2d& _internal_lowerleft() const;
  ::gazebo::msgs::Vector2d* _internal_mutable_lowerleft();
  public:
  void unsafe_arena_set_allocated_lowerleft(
      ::gazebo::msgs::Vector2d* lowerleft);
  ::gazebo::msgs::Vector2d* unsafe_arena_release_lowerleft();

  // required double height = 5;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  double height() const;
  void set_height(double value);
  private:
  double _internal_height() const;
  void _internal_set_height(double value);
  public:

  // required double resolution = 6;
  bool has_resolution() const;
  private:
  bool _internal_has_resolution() const;
  public:
  void clear_resolution();
  double resolution() const;
  void set_resolution(double value);
  private:
  double _internal_resolution() const;
  void _internal_set_resolution(double value);
  public:

  // optional int32 threshold = 8 [default = 255];
  bool has_threshold() const;
  private:
  bool _internal_has_threshold() const;
  public:
  void clear_threshold();
  ::PROTOBUF_NAMESPACE_ID::int32 threshold() const;
  void set_threshold(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_threshold() const;
  void _internal_set_threshold(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:collision_map_creator_msgs.msgs.CollisionMapRequest)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::gazebo::msgs::Vector2d* upperleft_;
  ::gazebo::msgs::Vector2d* upperright_;
  ::gazebo::msgs::Vector2d* lowerright_;
  ::gazebo::msgs::Vector2d* lowerleft_;
  double height_;
  double resolution_;
  ::PROTOBUF_NAMESPACE_ID::int32 threshold_;
  friend struct ::TableStruct_collision_5fmap_5frequest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CollisionMapRequest

// required .gazebo.msgs.Vector2d upperLeft = 1;
inline bool CollisionMapRequest::_internal_has_upperleft() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || upperleft_ != nullptr);
  return value;
}
inline bool CollisionMapRequest::has_upperleft() const {
  return _internal_has_upperleft();
}
inline const ::gazebo::msgs::Vector2d& CollisionMapRequest::_internal_upperleft() const {
  const ::gazebo::msgs::Vector2d* p = upperleft_;
  return p != nullptr ? *p : reinterpret_cast<const ::gazebo::msgs::Vector2d&>(
      ::gazebo::msgs::_Vector2d_default_instance_);
}
inline const ::gazebo::msgs::Vector2d& CollisionMapRequest::upperleft() const {
  // @@protoc_insertion_point(field_get:collision_map_creator_msgs.msgs.CollisionMapRequest.upperLeft)
  return _internal_upperleft();
}
inline void CollisionMapRequest::unsafe_arena_set_allocated_upperleft(
    ::gazebo::msgs::Vector2d* upperleft) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(upperleft_);
  }
  upperleft_ = upperleft;
  if (upperleft) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:collision_map_creator_msgs.msgs.CollisionMapRequest.upperLeft)
}
inline ::gazebo::msgs::Vector2d* CollisionMapRequest::release_upperleft() {
  _has_bits_[0] &= ~0x00000002u;
  ::gazebo::msgs::Vector2d* temp = upperleft_;
  upperleft_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::gazebo::msgs::Vector2d* CollisionMapRequest::unsafe_arena_release_upperleft() {
  // @@protoc_insertion_point(field_release:collision_map_creator_msgs.msgs.CollisionMapRequest.upperLeft)
  _has_bits_[0] &= ~0x00000002u;
  ::gazebo::msgs::Vector2d* temp = upperleft_;
  upperleft_ = nullptr;
  return temp;
}
inline ::gazebo::msgs::Vector2d* CollisionMapRequest::_internal_mutable_upperleft() {
  _has_bits_[0] |= 0x00000002u;
  if (upperleft_ == nullptr) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Vector2d>(GetArena());
    upperleft_ = p;
  }
  return upperleft_;
}
inline ::gazebo::msgs::Vector2d* CollisionMapRequest::mutable_upperleft() {
  // @@protoc_insertion_point(field_mutable:collision_map_creator_msgs.msgs.CollisionMapRequest.upperLeft)
  return _internal_mutable_upperleft();
}
inline void CollisionMapRequest::set_allocated_upperleft(::gazebo::msgs::Vector2d* upperleft) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(upperleft_);
  }
  if (upperleft) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(upperleft)->GetArena();
    if (message_arena != submessage_arena) {
      upperleft = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, upperleft, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  upperleft_ = upperleft;
  // @@protoc_insertion_point(field_set_allocated:collision_map_creator_msgs.msgs.CollisionMapRequest.upperLeft)
}

// required .gazebo.msgs.Vector2d upperRight = 2;
inline bool CollisionMapRequest::_internal_has_upperright() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || upperright_ != nullptr);
  return value;
}
inline bool CollisionMapRequest::has_upperright() const {
  return _internal_has_upperright();
}
inline const ::gazebo::msgs::Vector2d& CollisionMapRequest::_internal_upperright() const {
  const ::gazebo::msgs::Vector2d* p = upperright_;
  return p != nullptr ? *p : reinterpret_cast<const ::gazebo::msgs::Vector2d&>(
      ::gazebo::msgs::_Vector2d_default_instance_);
}
inline const ::gazebo::msgs::Vector2d& CollisionMapRequest::upperright() const {
  // @@protoc_insertion_point(field_get:collision_map_creator_msgs.msgs.CollisionMapRequest.upperRight)
  return _internal_upperright();
}
inline void CollisionMapRequest::unsafe_arena_set_allocated_upperright(
    ::gazebo::msgs::Vector2d* upperright) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(upperright_);
  }
  upperright_ = upperright;
  if (upperright) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:collision_map_creator_msgs.msgs.CollisionMapRequest.upperRight)
}
inline ::gazebo::msgs::Vector2d* CollisionMapRequest::release_upperright() {
  _has_bits_[0] &= ~0x00000004u;
  ::gazebo::msgs::Vector2d* temp = upperright_;
  upperright_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::gazebo::msgs::Vector2d* CollisionMapRequest::unsafe_arena_release_upperright() {
  // @@protoc_insertion_point(field_release:collision_map_creator_msgs.msgs.CollisionMapRequest.upperRight)
  _has_bits_[0] &= ~0x00000004u;
  ::gazebo::msgs::Vector2d* temp = upperright_;
  upperright_ = nullptr;
  return temp;
}
inline ::gazebo::msgs::Vector2d* CollisionMapRequest::_internal_mutable_upperright() {
  _has_bits_[0] |= 0x00000004u;
  if (upperright_ == nullptr) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Vector2d>(GetArena());
    upperright_ = p;
  }
  return upperright_;
}
inline ::gazebo::msgs::Vector2d* CollisionMapRequest::mutable_upperright() {
  // @@protoc_insertion_point(field_mutable:collision_map_creator_msgs.msgs.CollisionMapRequest.upperRight)
  return _internal_mutable_upperright();
}
inline void CollisionMapRequest::set_allocated_upperright(::gazebo::msgs::Vector2d* upperright) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(upperright_);
  }
  if (upperright) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(upperright)->GetArena();
    if (message_arena != submessage_arena) {
      upperright = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, upperright, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  upperright_ = upperright;
  // @@protoc_insertion_point(field_set_allocated:collision_map_creator_msgs.msgs.CollisionMapRequest.upperRight)
}

// required .gazebo.msgs.Vector2d lowerRight = 3;
inline bool CollisionMapRequest::_internal_has_lowerright() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || lowerright_ != nullptr);
  return value;
}
inline bool CollisionMapRequest::has_lowerright() const {
  return _internal_has_lowerright();
}
inline const ::gazebo::msgs::Vector2d& CollisionMapRequest::_internal_lowerright() const {
  const ::gazebo::msgs::Vector2d* p = lowerright_;
  return p != nullptr ? *p : reinterpret_cast<const ::gazebo::msgs::Vector2d&>(
      ::gazebo::msgs::_Vector2d_default_instance_);
}
inline const ::gazebo::msgs::Vector2d& CollisionMapRequest::lowerright() const {
  // @@protoc_insertion_point(field_get:collision_map_creator_msgs.msgs.CollisionMapRequest.lowerRight)
  return _internal_lowerright();
}
inline void CollisionMapRequest::unsafe_arena_set_allocated_lowerright(
    ::gazebo::msgs::Vector2d* lowerright) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lowerright_);
  }
  lowerright_ = lowerright;
  if (lowerright) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:collision_map_creator_msgs.msgs.CollisionMapRequest.lowerRight)
}
inline ::gazebo::msgs::Vector2d* CollisionMapRequest::release_lowerright() {
  _has_bits_[0] &= ~0x00000008u;
  ::gazebo::msgs::Vector2d* temp = lowerright_;
  lowerright_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::gazebo::msgs::Vector2d* CollisionMapRequest::unsafe_arena_release_lowerright() {
  // @@protoc_insertion_point(field_release:collision_map_creator_msgs.msgs.CollisionMapRequest.lowerRight)
  _has_bits_[0] &= ~0x00000008u;
  ::gazebo::msgs::Vector2d* temp = lowerright_;
  lowerright_ = nullptr;
  return temp;
}
inline ::gazebo::msgs::Vector2d* CollisionMapRequest::_internal_mutable_lowerright() {
  _has_bits_[0] |= 0x00000008u;
  if (lowerright_ == nullptr) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Vector2d>(GetArena());
    lowerright_ = p;
  }
  return lowerright_;
}
inline ::gazebo::msgs::Vector2d* CollisionMapRequest::mutable_lowerright() {
  // @@protoc_insertion_point(field_mutable:collision_map_creator_msgs.msgs.CollisionMapRequest.lowerRight)
  return _internal_mutable_lowerright();
}
inline void CollisionMapRequest::set_allocated_lowerright(::gazebo::msgs::Vector2d* lowerright) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lowerright_);
  }
  if (lowerright) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lowerright)->GetArena();
    if (message_arena != submessage_arena) {
      lowerright = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lowerright, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  lowerright_ = lowerright;
  // @@protoc_insertion_point(field_set_allocated:collision_map_creator_msgs.msgs.CollisionMapRequest.lowerRight)
}

// required .gazebo.msgs.Vector2d lowerLeft = 4;
inline bool CollisionMapRequest::_internal_has_lowerleft() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || lowerleft_ != nullptr);
  return value;
}
inline bool CollisionMapRequest::has_lowerleft() const {
  return _internal_has_lowerleft();
}
inline const ::gazebo::msgs::Vector2d& CollisionMapRequest::_internal_lowerleft() const {
  const ::gazebo::msgs::Vector2d* p = lowerleft_;
  return p != nullptr ? *p : reinterpret_cast<const ::gazebo::msgs::Vector2d&>(
      ::gazebo::msgs::_Vector2d_default_instance_);
}
inline const ::gazebo::msgs::Vector2d& CollisionMapRequest::lowerleft() const {
  // @@protoc_insertion_point(field_get:collision_map_creator_msgs.msgs.CollisionMapRequest.lowerLeft)
  return _internal_lowerleft();
}
inline void CollisionMapRequest::unsafe_arena_set_allocated_lowerleft(
    ::gazebo::msgs::Vector2d* lowerleft) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lowerleft_);
  }
  lowerleft_ = lowerleft;
  if (lowerleft) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:collision_map_creator_msgs.msgs.CollisionMapRequest.lowerLeft)
}
inline ::gazebo::msgs::Vector2d* CollisionMapRequest::release_lowerleft() {
  _has_bits_[0] &= ~0x00000010u;
  ::gazebo::msgs::Vector2d* temp = lowerleft_;
  lowerleft_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::gazebo::msgs::Vector2d* CollisionMapRequest::unsafe_arena_release_lowerleft() {
  // @@protoc_insertion_point(field_release:collision_map_creator_msgs.msgs.CollisionMapRequest.lowerLeft)
  _has_bits_[0] &= ~0x00000010u;
  ::gazebo::msgs::Vector2d* temp = lowerleft_;
  lowerleft_ = nullptr;
  return temp;
}
inline ::gazebo::msgs::Vector2d* CollisionMapRequest::_internal_mutable_lowerleft() {
  _has_bits_[0] |= 0x00000010u;
  if (lowerleft_ == nullptr) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Vector2d>(GetArena());
    lowerleft_ = p;
  }
  return lowerleft_;
}
inline ::gazebo::msgs::Vector2d* CollisionMapRequest::mutable_lowerleft() {
  // @@protoc_insertion_point(field_mutable:collision_map_creator_msgs.msgs.CollisionMapRequest.lowerLeft)
  return _internal_mutable_lowerleft();
}
inline void CollisionMapRequest::set_allocated_lowerleft(::gazebo::msgs::Vector2d* lowerleft) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lowerleft_);
  }
  if (lowerleft) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lowerleft)->GetArena();
    if (message_arena != submessage_arena) {
      lowerleft = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lowerleft, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  lowerleft_ = lowerleft;
  // @@protoc_insertion_point(field_set_allocated:collision_map_creator_msgs.msgs.CollisionMapRequest.lowerLeft)
}

// required double height = 5;
inline bool CollisionMapRequest::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CollisionMapRequest::has_height() const {
  return _internal_has_height();
}
inline void CollisionMapRequest::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double CollisionMapRequest::_internal_height() const {
  return height_;
}
inline double CollisionMapRequest::height() const {
  // @@protoc_insertion_point(field_get:collision_map_creator_msgs.msgs.CollisionMapRequest.height)
  return _internal_height();
}
inline void CollisionMapRequest::_internal_set_height(double value) {
  _has_bits_[0] |= 0x00000020u;
  height_ = value;
}
inline void CollisionMapRequest::set_height(double value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:collision_map_creator_msgs.msgs.CollisionMapRequest.height)
}

// required double resolution = 6;
inline bool CollisionMapRequest::_internal_has_resolution() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CollisionMapRequest::has_resolution() const {
  return _internal_has_resolution();
}
inline void CollisionMapRequest::clear_resolution() {
  resolution_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double CollisionMapRequest::_internal_resolution() const {
  return resolution_;
}
inline double CollisionMapRequest::resolution() const {
  // @@protoc_insertion_point(field_get:collision_map_creator_msgs.msgs.CollisionMapRequest.resolution)
  return _internal_resolution();
}
inline void CollisionMapRequest::_internal_set_resolution(double value) {
  _has_bits_[0] |= 0x00000040u;
  resolution_ = value;
}
inline void CollisionMapRequest::set_resolution(double value) {
  _internal_set_resolution(value);
  // @@protoc_insertion_point(field_set:collision_map_creator_msgs.msgs.CollisionMapRequest.resolution)
}

// optional string filename = 7 [default = ""];
inline bool CollisionMapRequest::_internal_has_filename() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CollisionMapRequest::has_filename() const {
  return _internal_has_filename();
}
inline void CollisionMapRequest::clear_filename() {
  filename_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CollisionMapRequest::filename() const {
  // @@protoc_insertion_point(field_get:collision_map_creator_msgs.msgs.CollisionMapRequest.filename)
  return _internal_filename();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void CollisionMapRequest::set_filename(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:collision_map_creator_msgs.msgs.CollisionMapRequest.filename)
}
inline std::string* CollisionMapRequest::mutable_filename() {
  // @@protoc_insertion_point(field_mutable:collision_map_creator_msgs.msgs.CollisionMapRequest.filename)
  return _internal_mutable_filename();
}
inline const std::string& CollisionMapRequest::_internal_filename() const {
  return filename_.Get();
}
inline void CollisionMapRequest::_internal_set_filename(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* CollisionMapRequest::_internal_mutable_filename() {
  _has_bits_[0] |= 0x00000001u;
  return filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CollisionMapRequest::release_filename() {
  // @@protoc_insertion_point(field_release:collision_map_creator_msgs.msgs.CollisionMapRequest.filename)
  if (!_internal_has_filename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return filename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CollisionMapRequest::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:collision_map_creator_msgs.msgs.CollisionMapRequest.filename)
}

// optional int32 threshold = 8 [default = 255];
inline bool CollisionMapRequest::_internal_has_threshold() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CollisionMapRequest::has_threshold() const {
  return _internal_has_threshold();
}
inline void CollisionMapRequest::clear_threshold() {
  threshold_ = 255;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CollisionMapRequest::_internal_threshold() const {
  return threshold_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CollisionMapRequest::threshold() const {
  // @@protoc_insertion_point(field_get:collision_map_creator_msgs.msgs.CollisionMapRequest.threshold)
  return _internal_threshold();
}
inline void CollisionMapRequest::_internal_set_threshold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  threshold_ = value;
}
inline void CollisionMapRequest::set_threshold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_threshold(value);
  // @@protoc_insertion_point(field_set:collision_map_creator_msgs.msgs.CollisionMapRequest.threshold)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace collision_map_creator_msgs

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_collision_5fmap_5frequest_2eproto
